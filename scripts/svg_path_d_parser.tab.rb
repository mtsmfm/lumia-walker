#
# DO NOT MODIFY!!!!
# This file is automatically generated by Racc 1.5.1
# from Racc grammar file "".
#

require 'racc/parser.rb'

require 'bundler/inline'

gemfile do
  source 'https://rubygems.org'

  gem 'pry-byebug'
end

require 'pp'
require 'strscan'

class SvgPathDParser < Racc::Parser

module_eval(<<'...end svg_path_d_parser.ry/module_eval...', 'svg_path_d_parser.ry', 52)
class Point < Struct.new(:x, :y, keyword_init: true)
  def +(other)
    Point.new(x: x + other.x, y: y + other.y)
  end

  def as_json
    {x: x.to_f, y: y.to_f}
  end

  def inspect
    "(x: #{x.to_f}, y: #{y.to_f})"
  end
end

def initialize(str)
  @s = StringScanner.new(str)
end

def parse
  do_parse
end

def next_token
  loop do
    break if @s.eos?

    # skip
    case
    when @s.scan(/\A\s+/)
    when @s.scan(/\A,/)
    else
      break
    end
  end

  case
  when @s.eos?
    [false, nil]
  when @s.scan(/\A-?\d+\.?\d*/)
    [:NUMBER, @s.matched.to_r]
  when @s.scan(/\A[mMzZlL]/)
    [@s.matched, @s.matched]
  else
    p @s.scan(/.*/)
    raise "scanner error"
  end
end

def new_point(relative: nil, x:, y:)
  point = Point.new(x: x, y: y)

  @relative = relative unless relative.nil?

  point += @current if defined?(@current) && @relative

  @current = point

  point
end
...end svg_path_d_parser.ry/module_eval...
##### State transition tables begin ###

racc_action_table = [
    12,    15,     6,     7,     8,     9,    10,    11,     6,     7,
     8,     9,    10,    11,    15,    15,    15,    15,    15,    21,
    15,    15,    15,    15,    15,    15 ]

racc_action_check = [
     1,     3,     1,     1,     1,     1,     1,     1,     0,     0,
     0,     0,     0,     0,     5,     6,     7,     8,     9,    12,
    14,    16,    17,    18,    19,    20 ]

racc_action_pointer = [
     6,     0,   nil,    -7,   nil,     6,     7,     8,     9,    10,
   nil,   nil,    19,   nil,    12,   nil,    13,    14,    15,    16,
    17,   nil,   nil,   nil,   nil,   nil,   nil,   nil ]

racc_action_default = [
   -15,   -15,    -1,    -3,    -4,    -5,   -15,   -15,   -15,   -15,
   -12,   -13,   -15,    -2,   -15,   -14,   -15,   -15,   -15,   -15,
   -15,    28,    -8,   -11,    -6,    -7,    -9,   -10 ]

racc_goto_table = [
    14,     1,    16,    17,    18,    19,    20,     2,    13,   nil,
   nil,    22,   nil,    23,    24,    25,    26,    27 ]

racc_goto_check = [
     6,     1,     6,     6,     6,     6,     6,     2,     2,   nil,
   nil,     6,   nil,     6,     6,     6,     6,     6 ]

racc_goto_pointer = [
   nil,     1,     7,   nil,   nil,   nil,    -3 ]

racc_goto_default = [
   nil,   nil,   nil,     3,     4,     5,   nil ]

racc_reduce_table = [
  0, 0, :racc_error,
  1, 10, :_reduce_1,
  2, 10, :_reduce_2,
  1, 11, :_reduce_none,
  1, 11, :_reduce_none,
  1, 11, :_reduce_none,
  3, 12, :_reduce_6,
  3, 12, :_reduce_7,
  3, 12, :_reduce_8,
  3, 14, :_reduce_9,
  3, 14, :_reduce_10,
  3, 14, :_reduce_11,
  1, 13, :_reduce_12,
  1, 13, :_reduce_13,
  1, 15, :_reduce_none ]

racc_reduce_n = 15

racc_shift_n = 28

racc_token_table = {
  false => 0,
  :error => 1,
  "m" => 2,
  "M" => 3,
  "l" => 4,
  "L" => 5,
  "z" => 6,
  "Z" => 7,
  :NUMBER => 8 }

racc_nt_base = 9

racc_use_result_var = true

Racc_arg = [
  racc_action_table,
  racc_action_check,
  racc_action_default,
  racc_action_pointer,
  racc_goto_table,
  racc_goto_check,
  racc_goto_default,
  racc_goto_pointer,
  racc_nt_base,
  racc_reduce_table,
  racc_token_table,
  racc_shift_n,
  racc_reduce_n,
  racc_use_result_var ]

Racc_token_to_s_table = [
  "$end",
  "error",
  "\"m\"",
  "\"M\"",
  "\"l\"",
  "\"L\"",
  "\"z\"",
  "\"Z\"",
  "NUMBER",
  "$start",
  "operations",
  "operation",
  "moveto",
  "closepath",
  "lineto",
  "number" ]

Racc_debug_parser = false

##### State transition tables end #####

# reduce 0 omitted

module_eval(<<'.,.,', 'svg_path_d_parser.ry', 3)
  def _reduce_1(val, _values, result)
     result = val
    result
  end
.,.,

module_eval(<<'.,.,', 'svg_path_d_parser.ry', 4)
  def _reduce_2(val, _values, result)
     result = val.flatten
    result
  end
.,.,

# reduce 3 omitted

# reduce 4 omitted

# reduce 5 omitted

module_eval(<<'.,.,', 'svg_path_d_parser.ry', 12)
  def _reduce_6(val, _values, result)
            result = new_point(relative: true, x: val[1], y: val[2])

    result
  end
.,.,

module_eval(<<'.,.,', 'svg_path_d_parser.ry', 15)
  def _reduce_7(val, _values, result)
            result = new_point(relative: false, x: val[1], y: val[2])

    result
  end
.,.,

module_eval(<<'.,.,', 'svg_path_d_parser.ry', 18)
  def _reduce_8(val, _values, result)
            result = [val[0], new_point(x: val[1], y: val[2])].flatten

    result
  end
.,.,

module_eval(<<'.,.,', 'svg_path_d_parser.ry', 23)
  def _reduce_9(val, _values, result)
            result = new_point(relative: true, x: val[1], y: val[2])

    result
  end
.,.,

module_eval(<<'.,.,', 'svg_path_d_parser.ry', 26)
  def _reduce_10(val, _values, result)
            result = new_point(relative: false, x: val[1], y: val[2])

    result
  end
.,.,

module_eval(<<'.,.,', 'svg_path_d_parser.ry', 29)
  def _reduce_11(val, _values, result)
            result = [val[0], new_point(x: val[1], y: val[2])].flatten

    result
  end
.,.,

module_eval(<<'.,.,', 'svg_path_d_parser.ry', 32)
  def _reduce_12(val, _values, result)
     result = []
    result
  end
.,.,

module_eval(<<'.,.,', 'svg_path_d_parser.ry', 33)
  def _reduce_13(val, _values, result)
     result = []
    result
  end
.,.,

# reduce 14 omitted

def _reduce_none(val, _values, result)
  val[0]
end

end   # class SvgPathDParser
